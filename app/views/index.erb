<div id="map"></div>

<script type="text/javascript">

// var map;
// function initMap() {
//   map = new google.maps.Map(document.getElementById('map'), {
//     center: {lat: <%= @lat %>, lng: <%= @lon %>},
//     zoom: 6,
//     mapTypeId: 'satellite',
//     disableDefaultUI: true,
//   });
// }


var map;
var panorama;

function initMap() {
  var start =  {lat: <%= @lat %>, lng: <%= @lon %>};
  var sv = new google.maps.StreetViewService();

  panorama = new google.maps.StreetViewPanorama(document.getElementById('map'), {
        position: {lat: <%= @lat %>, lng: <%= @lon %>},

        addressControlOptions: {
          position: google.maps.ControlPosition.BOTTOM_CENTER,
        },
        linksControl: false,
        panControl: false,
        enableCloseButton: false
  });

  // Set up the map.
  // map = new google.maps.Map(document.getElementById('map'), {
  //   center: start,
  //   zoom: 16,
  //   streetViewControl: false,
  //   disableDefaultUI: true
  // });

  // Set the initial Street View camera to the center of the map
  sv.getPanorama({location: start, radius: 50}, processSVData);

  // Look for a nearby Street View panorama when the map is clicked.
  // getPanoramaByLocation will return the nearest pano when the
  // given radius is 50 meters or less.
  map.addListener('click', function(event) {
    sv.getPanorama({location: event.latLng, radius: 50}, processSVData);
  });
}

function processSVData(data, status) {
  if (status === google.maps.StreetViewStatus.OK) {
    var marker = new google.maps.Marker({
      position: data.location.latLng,
      map: map,
      title: data.location.description
    });

    panorama.setPano(data.location.pano);
    panorama.setPov({
      heading: 270,
      pitch: 0
    });
    panorama.setVisible(true);

    marker.addListener('click', function() {
      var markerPanoID = data.location.pano;
      // Set the Pano to use the passed panoID.
      panorama.setPano(markerPanoID);
      panorama.setPov({
        heading: 270,
        pitch: 0
      });
      panorama.setVisible(true);
    });
  } else {
    console.error('Street View data not found for this location.');
  }
}
</script>







<script async defer
      src="https://maps.googleapis.com/maps/api/js?key=<%=DEVELOPER_KEY%>&callback=initMap">
</script>

<div style="display: none" id="player"></div>
<script type="text/javascript">
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '10%',
          width: '10%',
          autohide: 1,
          videoId: <%= @yid %>,
          // videoId: 'R5UKeCMBvVc',
          events: {
            'onReady': onPlayerReady,
            // 'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
</script>

<div class="info">
    <div class="info__inner">
        <p>
            <b>Playing: </b><%= @videos[0] %> /
            <b>City: </b><%= @name %> /
            <b>Country: </b><%= @country %> /
            <b>Description: </b><%= @description %> /
            <b>Pressure: </b><%= @pressure %> hpa /
            <b>Humidity: </b><%= @humidity %> /
            <b>Cloudiness: </b><%= @clouds %>% /
            <b>Wind speed: </b><%= @windspeed %> /
            <b>Wind temperature: </b><%= @winddeg %> /
            <b>Longitude: </b><%= @lon %> /
            <b>Latitude: </b><%= @lat %> /
            <b>Sunrise: </b><%= @sunrise %> /
            <b>Sunset: </b><%= @sunset %> /
            <b>Info from: </b><%= @base %>
            <!-- <hr> -->
        </p>

    </div>
</div>